version: 3

output: prefixed

vars:
  # colors
  GREEN: $(tput setaf 2)
  RED: $(tput setaf 1)
  BLUE: $(tput setaf 31)
  NC: $(tput sgr0)

  # Paths
  SELF_DIR: $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
  CHEZMOIROOT: "{{.SELF_DIR}}/$(cat .chezmoiroot)"
  BREWFILE_PATH: "{{.CHEZMOIROOT}}/dot_core/brew/Brewfile"
  TEMP_PATH: "{{.HOME}}/.core/temp"
  POETRY_PATH: "{{.HOME}}/.core/poetry"
  ZSH_CUSTOM_PATH: "{{.HOME}}/.core/zsh"
  SCRIPTS_PATH: "{{.CHEZMOIROOT}}/dot_core/scripts"

  # PYTHON
  PYTHON_BASE_VERSION: "3.9.10"
  PYTHON_BASE_ENV: "base"
  PYTHON_JUPYTER_VERSION: "3.9.10"
  PYTHON_JUPYTER_ENV: "jupyter"

  # custom packages to install first through brew
  BREW_CORE_INSTALLS: |-
    python@3.9
    pyenv
    pyenv-virtualenv

tasks:
  init:
    - cmd: |
        echo "{{.GREEN}}Initializing temp dir {{.TEMP_PATH}}{{.NC}}"
        mkdir -p {{.TEMP_PATH}}
    - task: brew:make-temp-brewfiles
    - task: brew:tap
    - task: brew:install:core
    - task: oh-my-zsh-init
    - task: python:base-env
    - task: python:poetry-init
    - task: python:jupyter-env:init
    - task: brew:install:formula
    - task: brew:install:cask
    - task: chezmoi
    - task: vscode:install-extensions
    - task: macos:install-defaults
    - task: crontab:restore
    - defer: rm -rf {{.TEMP_PATH}}

  brew:update:
    desc: Run Brew Update
    cmds:
      - brew update

  brew:make-temp-brewfiles:
    desc: build temp directory where we will make different brewfiles for taps, formulas, and cask
    cmds:
      - ((grep '^[tap]' ) < {{.BREWFILE_PATH}}) > {{.TEMP_PATH}}/taps.brewfile
      - ((grep '^[brew]' ) < {{.BREWFILE_PATH}}) > {{.TEMP_PATH}}/formula.brewfile
      - ((grep '^[cask]' ) < {{.BREWFILE_PATH}}) > {{.TEMP_PATH}}/cask.brewfile
  brew:tap:
    desc: "Install brew taps"
    deps: [brew:update]
    cmds:
      - brew bundle --file={{.TEMP_PATH}}/taps.brewfile
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  brew:install:core:
    desc: "Install brew core packages defined in BREW_CORE_INSTALLS variable"
    cmds:
      - brew install python@3.9
      - brew install pyenv
      - brew install pyenv-virtualenv
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  brew:install:formula:
    desc: "Install brew formulas defined on the Brewfile"
    deps: [brew:update]
    cmds:
      - brew bundle --file={{.TEMP_PATH}}/formula.brewfile
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  brew:install:cask:
    desc: "Install brew cask defined on the Brewfile"
    deps: [brew:update]
    cmds:
      - brew bundle --file={{.TEMP_PATH}}/cask.brewfile
    interactive: true
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  oh-my-zsh-init:
    desc: "Initialize oh-my-zsh"
    cmds:
      - |
        if [ ! -d "{{.HOME}}/.oh-my-zsh" ]; then
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        fi

  python:base-env:
    desc: "Create base python env for local machine through pyenv"
    cmds:
      - echo "{{.BLUE}} Creating pyenv base env {{.NC}}"
      - cmd: '{{if eq OS "linux"}} brew uninstall readline --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - cmd: '{{if eq OS "linux"}} brew uninstall zlib --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - |
        export PATH="$(brew --prefix pyenv-virtualenv)/bin:$(brew --prefix pyenv)/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"
        pyenv install {{.PYTHON_BASE_VERSION}} -s
        pyenv virtualenv {{.PYTHON_BASE_VERSION}} {{.PYTHON_BASE_ENV}} || true
        pyenv global {{.PYTHON_BASE_ENV}}
        pyenv rehash
      - defer: brew install readline zlib # do even if prev command fails

  python:poetry-init:
    desc: "Initialize poetry"
    cmds:
      - |
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        curl -sSL https://install.python-poetry.org | POETRY_HOME={{.POETRY_PATH}} {{.PYTHON_BASE_ENV_BIN}} -
    vars:
      PYTHON_BASE_ENV_BIN:
        sh: echo "$(pyenv root)/versions/{{.PYTHON_BASE_ENV}}/bin/python"

  python:jupyter-env:init:
    desc: "Initialize jupyter environment with pyenv"
    cmds:
      - echo "{{.BLUE}} Creating pyenv jupyter env {{.NC}}"
      - cmd: '{{if eq OS "linux"}} brew uninstall readline --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - cmd: '{{if eq OS "linux"}} brew uninstall zlib --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - |
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv init --path)"
        eval "$(pyenv virtualenv-init -)"
        pyenv install {{.PYTHON_JUPYTER_VERSION}} -s
        pyenv virtualenv {{.PYTHON_JUPYTER_VERSION}} {{.PYTHON_JUPYTER_ENV}} || true
        pyenv shell {{.PYTHON_JUPYTER_ENV}}
        pyenv rehash
        echo "$PYENV_VERSION"
        if [[ "$PYENV_VERSION"  == "{{.PYTHON_JUPYTER_ENV}}" ]]; then
          python -m pip install --upgrade pip
          pip install jupyterlab black jupyter_contrib_nbextensions jupyter_nbextensions_configurator ipykernel
        fi
      - defer: brew install readline zlib # do even if prev command fails

  chezmoi:
    desc: Apply chezmoi dotfiles
    cmds:
      - chezmoi init --apply

  vscode:install-extensions:
    desc: install extensions of vscode
    cmds:
      - chmod +x {{.SCRIPTS_PATH}}/executable_install-vscode-extensions.sh
      - mkdir -p {{.HOME}}/.vscode/extensions
      - bash {{.SCRIPTS_PATH}}/executable_install-vscode-extensions.sh

  macos:install-defaults:
    desc: install defaults configs
    cmds:
      - |
        if [[ {{OS}} == "darwin" ]]; then
          chmod +x {{.SCRIPTS_PATH}}/executable_dot_macos
          bash {{.SCRIPTS_PATH}}/executable_dot_macos
        else
          echo "{{.RED}} Not macos {{.NC}} -> Skipping apply macos defaults"
        fi

  crontab:restore:
    desc: "Restore crontab file from backup"
    cmds:
      - crontab < {{.HOME}}/.core/scripts/crontab.save
