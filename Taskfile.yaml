version: 3

output: prefixed

vars:
  # colors
  GREEN: $(tput setaf 2)
  RED: $(tput setaf 1)
  BLUE: $(tput setaf 31)
  NC: $(tput sgr0)

  # Paths
  SELF_DIR: $(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
  CHEZMOIROOT: "{{.SELF_DIR}}/$(cat .chezmoiroot)"
  BREWFILE_PATH: "{{.CHEZMOIROOT}}/dot_core/brew/Brewfile"
  POETRY_PATH: "{{.HOME}}/.core/poetry"
  ZSH_CUSTOM_PATH: "{{.HOME}}/.core/zsh"
  SCRIPTS_PATH: "{{.CHEZMOIROOT}}/dot_core/scripts"

  # PYTHON
  PYTHON_BASE_VERSION: "3.9.10"
  PYTHON_BASE_ENV: "base"
  PYTHON_JUPYTER_VERSION: "3.9.10"
  PYTHON_JUPYTER_ENV: "jupyter"

  # custom packages to install first through brew
  BREW_CORE_INSTALLS: |-
    python@3.9
    pyenv
    pyenv-virtualenv

tasks:
  init:
    - task: brew:tap
    - task: brew:core-install
    - task: oh-my-zsh-init
    - task: python:base-env
    - task: python:poetry-init
    - task: python:jupyter-env:init
    - task: python:jupyter-env:install-deps
    - task: brew:formula-install

  brew:update:
    desc: Run Brew Update
    cmds:
      - brew update

  brew:tap:
    desc: "Install brew taps"
    deps: [brew:update]
    cmds:
      - |
        while IFS= read -r line; do
            echo "Tapping $line"
            brew tap $line
            echo "Done Tapping $line"
        done < <(printf '%s\n' $(cat {{.BREWFILE_PATH}} |  grep '^[tap]' | grep -o '".*"' | tr -d '"' ))
      - echo 'DONE'
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  brew:core-install:
    desc: "Install brew core packages defined in BREW_CORE_INSTALLS variable"
    cmds:
      - |
        while IFS= read -r line; do
            echo "Installing $line"
            brew install $line
            echo "Done Installing $line"
        done < <(printf '%s\n' "{{.BREW_CORE_INSTALLS}}")
    env:
      HOMEBREW_UPDATE_PREINSTALL: 0

  brew:formula-install:
    desc: "Install brew formulas defined on the Brewfile"
    cmds:
      - cat {{.BREWFILE_PATH}} | grep '^[brew]' | grep -o '".*"' | tr -d '"' | tr '\n' '\0' |   xargs -n 1 -0 -I@ bash -c "echo '{{.BLUE}} Installing @ {{.NC}}' && brew install @ && echo '{{.GREEN}} Done Installing @ {{.NC}}'"

  oh-my-zsh-init:
    desc: "Initialize oh-my-zsh"
    cmds:
      - |
        if [ ! -d "{{.HOME}}/.oh-my-zsh" ]; then
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        fi

  python:base-env:
    desc: "Create base python env for local machine through pyenv"
    cmds:
      - echo "{{.BLUE}} Creating pyenv base env {{.NC}}"
      - cmd: '{{if eq OS "linux"}} brew uninstall readline --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - cmd: '{{if eq OS "linux"}} brew uninstall zlib --ignore-dependencies {{end}}' # see top comment
      - |
        eval "$(pyenv init -)"
        export PYENV_ROOT="{{.HOME}}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv virtualenv-init -)"
        eval "$(pyenv init --path)"
        pyenv install {{.PYTHON_BASE_VERSION}}
        pyenv virtualenv {{.PYTHON_BASE_VERSION}} {{.PYTHON_BASE_ENV}}
        pyenv global {{.PYTHON_BASE_ENV}}
        pyenv rehash
      - defer: brew install readline zlib # do even if prev command fails

  python:poetry-init:
    desc: "Initialize poetry"
    cmds:
      - |
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        curl -sSL https://install.python-poetry.org | POETRY_HOME={{.POETRY_PATH}} {{.PYTHON_BASE_ENV_BIN}} -
    vars:
      PYTHON_BASE_ENV_BIN:
        sh: echo "$(pyenv root)/versions/{{.PYTHON_BASE_ENV}}/bin/python"

  python:jupyter-env:init:
    desc: "Initialize jupyter environment with pyenv"
    cmds:
      - echo "{{.BLUE}} Creating pyenv jupyter env {{.NC}}"
      - cmd: '{{if eq OS "linux"}} brew uninstall readline --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - cmd: '{{if eq OS "linux"}} brew uninstall zlib --ignore-dependencies {{end}}' # see top comment
        ignore_error: true
      - |
        
        eval "$(pyenv init -)"
        export PYENV_ROOT="{{.HOME}}/.pyenv"
        export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv virtualenv-init -)"
        eval "$(pyenv init --path)"
        pyenv install {{.PYTHON_JUPYTER_VERSION}} -s
        pyenv virtualenv {{.PYTHON_JUPYTER_VERSION}} {{.PYTHON_JUPYTER_ENV}} || true
        pyenv shell {{.PYTHON_JUPYTER_ENV}}
        pyenv rehash
        echo "$PYEV_VERSION"
        if [[ "$PYENV_VERSION"  == "{{.PYTHON_JUPYTER_ENV}}" ]]; then
          python -m pip install --upgrade pip
          pip install jupyterlab black jupyter_contrib_nbextensions jupyter_nbextensions_configurator ipykernel
        fi
      - defer: brew install readline zlib # do even if prev command fails

  install-crontab-ui:
    desc: Install crontab ui https://github.com/alseambusher/crontab-ui
    cmds:
      - |
        source {{.HOME}}/.nvm/nvm.sh
        npm install -g crontab-ui
